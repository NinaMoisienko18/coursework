import streamlit as st
from PIL import Image
from ocr_functions import perform_ocr, extract_text_from_pdf, display_ocr_image, download_file
import tempfile
import base64
main_bg = "background.png"

st.set_page_config(page_title="Text Recognition App", page_icon="üßæ")


st.markdown("")
st.markdown(
    "<h1 style='color: #000000; text-align: center; font-size: 35px''>–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö —Ç–∞ PDF-—Ñ–∞–π–ª–∞—Ö [üßæ]</h1>",
    unsafe_allow_html=True)
st.markdown("")
st.markdown(
    "<div style='text-align: justify; font-size: 18px'><b>üìåText Recognition App</b> - —Ü–µ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫,"
    " —è–∫–∏–π —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ –º–µ—Ç–æ—é –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ PDF-—Ñ–∞–π–ª—ñ–≤, –∑–Ω–∞—á–Ω–æ –∑–µ–∫–æ–Ω–æ–º–∏—Ç—å —á–∞—Å —Ç–∞ –∑—É—Å–∏–ª–ª—è –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö! </div>",
    unsafe_allow_html=True)
st.markdown("")

selection = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —É –ø—Ä–æ–≥—Ä–∞–º—É üëá",
                         ["–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ üíª", "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç"], key="photo_selection")

user_input_format = None
data = None

if selection == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ üíª":
    data = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ", type=['png', 'jpg', 'jpeg'], key="photo_uploader")
    user_input_format = st.selectbox("–§–æ—Ä–º–∞—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                                     ["–ß–µ–∫", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø—Ä–æ—Å—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ —Ç–∞–±–ª–∏—Ü—å —Ç–æ—â–æ)"])

elif selection == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç":
    data = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª", type=['pdf'], key="document_uploader")

if data:
    if selection == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç":
        num_pages = st.number_input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏", min_value=1, max_value=100, value=1,
                                    step=1)

        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            temp_file.write(data.getvalue())
            temp_file_path = temp_file.name

        text = extract_text_from_pdf(temp_file_path, num_pages)

        st.markdown("<h4 style='color: #000000; text-align: center;'>–ó–Ω–∞–π–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç:</h4>", unsafe_allow_html=True)
        text_area = st.code(text)
        download_file(text)
        st.markdown("")
    else:

        img = Image.open(data)
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            temp_file.write(data.getvalue())
            temp_file_path = temp_file.name

        img_ocr, boxes, text = perform_ocr(temp_file_path, user_input_format)
        if img is not None:
            display_ocr_image(img_ocr, boxes)

        if text:
            st.markdown("<h4 style='color: #000000; text-align: center;'>–ó–Ω–∞–π–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç:</h4>", unsafe_allow_html=True)
            text_area = st.code(text)
            st.markdown("")

        download_file(text)


def get_base64(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()


def set_background(png_file):
    page_bg_img = '''
    <style>
    .stApp {
    background-image: url("data:image/png;base64,%s");
    background-size: cover;
    }
    </style>
    ''' % get_base64(png_file)
    st.markdown(page_bg_img, unsafe_allow_html=True)


set_background(main_bg)
